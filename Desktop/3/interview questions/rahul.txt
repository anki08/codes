Given an integer n , you have to print all the ways in which n can be represented as sum of positive integers.

Sample Input : 3

Sample Output :

1+1+1

1+2

2+1

3


rajcools 
Member	
Posted 5 months ago # 


recursion

#include<stdio.h>
#include<conio.h>
void printall(int n,char str[],int index)
{
     if(n==0)
     {
     printf("%s\n",str);
     return;
     }
     if(n<0)
     return;
     for(int i =1;i<=n;i++)
     {
             str[index-1] = i+48;
             str[index] = '';
             index = index+1;

             printall(n-i,str,index);
             index--;
             }

 }

int main()
{
    int n;
    printf("enter a number n\n");
    scanf("%d",&n);
    fflush(stdin);
    char str[100];
    printall(n,str,1);
    getchar();
}

George 
guest	
Posted 5 months ago # 


	public static void gen(int num){

		for (int n = 1; n <= num; n++) {
			int[] items = new int[n];
			items[0] = num - n + 1;
			for (int i = 1; i < items.length; i++) {
				items[i] = 1;
			}
			System.out.println(arrayToString(items));
			int index = 0;
			while (items[items.length - 1] != (num - n + 1)) {
				if (items[index] > 1) {
					items[index]--;
					items[index + 1]++;
					System.out.println(arrayToString(items));
				} else {
					index++;
				}
			}
		}

	}





























Write a C program to find the smallest of three integers, without using any of the comparision operators.


techcoder 
Member	
Posted 1 week ago # 


here is the function that find greater of two numbers
int larger(int a,int b)
{
int c=a-b;
int k=c>>31&1;
int max=a-k*c;
return max;
}

to find greater of three numbers call as
larger(a,larger(b,c));


Sumit172 
Member	
Posted 6 days ago # 




Narendra. 
guest	
Posted 6 days ago # 


int
main(void)
{
int n1, n2, n3, cnt;

n1 = 100;
n2 = 15;
n3 = 8;
cnt = 0;

while (n1 && n2 && n3) {
++cnt;
--n1, --n2, --n3;
}
printf("Smallest number: %d\n", cnt);

return 0;
}









Given a number x, efficiently print the digits of x one by one without using any temporary variables.

Ex: x = 5431
O/P
5
4
3
1


@First Timer: isn't i an temporary variable?

my idea:

printNum(x) {
if (x>0) {
printNum(x/10);
println(x mod 10); // to stdout
}
}















Multiply all the elements of A[] and store the output in an aray out[], and the element at out[i] should be the output of all elements of A[] except A[i]


calculate product of all element of given array and store it in a variable called Prod, the start a loop from 0 to n and subtract the encountered element from the sum and store it again in the same array



A Product Array Puzzle
May 18, 2010
Given an array arr[] of n integers, construct a Product Array prod[] (of same size) such that prod[i] is equal to the product of all the elements of arr[] except arr[i]. Solve it without division operator and in O(n).

Example:
arr[] = {10, 3, 5, 6, 2}
prod[] = {180, 600, 360, 300, 900}

Algorithm:
1) Construct a temporary array left[] such that left[i] contains product of all elements on left of arr[i] excluding arr[i].
2) Construct another temporary array right[] such that right[i] contains product of all elements on on right of arr[i] excluding arr[i].
3) To get prod[], multiply left[] and right[].

Implementation:

#include<stdio.h>
#include<stdlib.h>
 
/* Function to print product array for a given array
 arr[] of size n */
void productArray(int arr[], int n)
{
  /* Allocate memory for temporary arrays left[] and right[] */
  int *left = (int *)malloc(sizeof(int)*n);
  int *right = (int *)malloc(sizeof(int)*n);
 
  /* Allocate memory for the product array */
  int *prod = (int *)malloc(sizeof(int)*n);
 
  int i, j;
 
  /* Left most element of left array is always 1 */
  left[0] = 1;
 
  /* Rightmost most element of right array is always 1 */
  right[n-1] = 1;
 
  /* Construct the left array */
  for(i = 1; i < n; i++)
    left[i] = arr[i-1]*left[i-1];
 
  /* Construct the right array */
  for(j = n-2; j >=0; j--)
    right[j] = arr[j+1]*right[j+1];
 
  /* Construct the product array using
    left[] and right[] */
  for (i=0; i<n; i++)
    prod[i] = left[i] * right[i];  
 
  /* print the constructed prod array */
  for (i=0; i<n; i++)
    printf("%d ", prod[i]);
 
  return;
}
 
/* Driver program to test above functions */
int main()
{
  int arr[] = {10, 3, 5, 6, 2};
  int n = sizeof(arr)/sizeof(arr[0]);
  printf("The product array is: \n");
  productArray(arr, n);
  getchar();
}
Time Complexity: O(n)
Space Complexity: O(n)
Auxiliary Space: O(n)

The above method can be optimized to work in space complexity O(1). Thanks to Dileep for suggesting the below solution.

void productArray(int arr[], int n)
{
  int i, temp = 1;
 
  /* Allocate memory for the product array */
  int *prod = (int *)malloc(sizeof(int)*n);
 
  /* Initialize the product array as 1 */
  memset(prod,1,n);
 
  /* In this loop, temp variable contains product of
    elements on left side excluding arr[i] */
  for(i=0; i<n; i++)
  {
    prod[i] = temp;
    temp *= arr[i];
  }
 
  /* Initialize temp to 1 for product on right side */
  temp = 1;
 
  /* In this loop, temp variable contains product of
    elements on right side excluding arr[i] */
  for(i= n-1; i>=0; i--)
  {
    prod[i] *= temp;
    temp *= arr[i];
  }
 
  /* print the constructed prod array */
  for (i=0; i<n; i++)
    printf("%d ", prod[i]);
 
  return;
}
Time Complexity: O(n)
Space Complexity: O(n)
Auxiliary Space: O(1)
























swap adjacent nodes of given linked list using one pointer


Manu 
guest	
Posted 4 weeks ago # 


while(temp->next!=NULL)
{
node * ptr=temp->next->next;
temp->next=temp;
temp->next=ptr;
temp=temp->next;
}


VD 
guest	
Posted 1 week ago # 


@ manu dont you think you are using two pointers ,one *ptr and another *temp.

X := X XOR Y
Y := X XOR Y
X := X XOR Y


Anjum 
guest	
Posted 11 months ago # 


Or you can do.

x=x+y;
y=x-y;
x=x-y;

Ex: x=3 y=2
x=5;
y=5-2 =>3
x=5-3=>2 Hence y=3 and x=2


kartik 
Moderator	
Posted 11 months ago # 


@Anjum: your method works fine, but there can be airthmatic. XOR method doesn't suffer from this problem.


udit 
guest	
Posted 1 week ago # 


y^=x^=y^=x;


















sanjeev 
guest	
Posted 2 weeks ago # 


Input is a matrix of size n x m of 0's and 1's. eg:
1 0 0 1
0 0 1 0
0 0 0 0

If a location has 1; make all the elements of that row and column = 1. eg
1 1 1 1
1 1 1 1
1 0 1 1

Solution should be with Time complexity = O(n*m) and space complexity = O(1)


nikhil 
guest	
Posted 2 weeks ago # 


void modify(int** arr,int rows,int cols){
    int i,j;
    int m,n;
    m=cols;
    n=rows;
    int flag=0;
    for(i=0;i<m;i++){
        flag=0;
        for(j=0;j<n;j++){
            if(arr[j][i]==1){
                flag=1;
                break;
            }
        }
        if(flag==1){
        for(j=0;j<n;j++){
            if(arr[j][i]==1)
                continue;
            arr[j][i]=2;
        }
        }
    }
    flag=0;
    for(i=0;i<n;i++){
        flag=0;
        for(j=0;j<m;j++){
            if(arr[i][j]==1){
                flag=1;
                break;
            }

        }
        if(flag){
        for(j=0;j<m;j++){
            if(arr[i][j]==1)
                continue;
            arr[i][j]=2;
        }
        }
    }
   for(i=0;i<n;i++){
        for(j=0;j<m;j++){
            if(arr[i][j]==2)
                arr[i][j]=1;
        }
    }

}

Dixit Sethi 
guest	
Posted 2 weeks ago # 


First traverse each row and OR the elements of each row, like OR elements a[0][0], a[0][1], a[0][2], a[0][3] and if OR is 1 then tag that row in row_flag i.e row_flag[0]=1. Similarly if any 1 in row 1 then row_flag[1]=1 etc. Do same for columns. Now once tagging is done, make all the elements in tagged row and column equal to 1.


void fn(int *q, int row, int col)
{
    int i,j,k, row_flag[row], col_flag[col];
    for(i=0; i<3; i++)
    {
        printf("\n");
        for(j=0; j<4; j++)
            printf("%d",*(q+i*col+j));
    }

    //tagging rows
    for(i=0; i<row; i++)
    {
        k=0;
        for(j=0; j<col; j++)
        {
            if(k==1)
            {
                row_flag[i]=1;
                break;
            }
            k=k||*(q+i*col+j);

        }
    }

    //tagging cols
    for(j=0; j<col; j++)
    {
        k=0;
        for(i=0; i<row; i++)
        {
            if(k==1)
            {
                col_flag[j]=1;
                break;
            }
            k=k||*(q+i*col+j);

        }
    }
    //making elements of tagged row equal to 1
    for(i=0; i<row; i++)
        if(row_flag[i]==1)
            for(j=0; j<col; j++)
                *(q+i*col+j)=1;

    //making elements of tagged cols equal to 1
    for(j=0; j<col; j++)
        if(col_flag[j]==1)
            for(i=0; i<row; i++)
                *(q+i*col+j)=1;

}

anurag kumar 
guest	
Posted 2 weeks ago # 


1)in first loop make all the 1 to -1
2) in second loop whenever u detect a -1 make all the zero in row and column as 1 (without effecting 1 and -1)

3) loop again and make all the -1 entry to 1


Dixit Sethi 
guest	
Posted 1 week ago # 


Anurag Kumar, the solution you gave was no doubt tricky, but just think of the complexity it has, mainly in step 2. As a -1 is found, all 0 in its rows elements are to be made 1. To access an element in 2-D matrix is itself having two loops and then changing all 0 will cause more nested loops. Maybe if you have something else in mind, you can share that.


anurag kumar 
guest	
Posted 1 week ago # 


here is the solution , where u just need to traverse only M x N entry or in worst case it may be M x (N+N)
still( O(MN) )

for(int i=0;i<row;i++)
{
rflag=0;zfs=-1;

for(int j=0;j<col;j++)
{

if(a[i][j]==0 && zst==-1 && flag==0)
zst=j;

if(a[i][j]==0 && rflag==1)
a[i][j]=1;

if(a[i][j]==1 && )
{

if ((i+1)<row )a[i+1][j]=-1;

rflag=1

if(zfs!=-1)for(int p=zfs to j)a[i][p]=1;
}

if(a[i][j]==-1 )
{a[i][j]=1;
if(i+1<row && a[i+1][j]!=1 )a[i+1][j]=-1
}

}


GeeksforGeeks 
Key Master	
Posted 1 week ago # 


This has been published. Please see http://www.geeksforgeeks.org/archives/14722

































Insert an element in a linked list at the end , given the start pointer.


ygos 
guest	
Posted 1 week ago # 


node* insert(node *head, node* a)
{
    if (!a) return head;
    a->next = NULL;
    if (!head) return a;

    for (node* tail=head; tail->next; tail=tail->next) ; /*empty loop body */

    tail->next = a;
    return head;
}

pgiitu 
Member	
Posted 1 week ago # 


Check this one

Node * insert(Node *head,Node *new_node)
{
            if(!new_node)
                          return head;
            if(!head)
                          return new_node;
            Node *tmp=head;
            Node *prev=head;
            while(tmp!=NULL)
            {
                    prev=tmp;
                    tmp=tmp->next;
             }

             new_node->next=NULL;
             prev->next=new_node;

}




































Write a function print(int n) which prints the values of n, 2n, 4n, 8n ... till the value doesn't exceed 40000. After reaching 40000, it it should print 8x, 4n, 2n, n. No local variables, no loop and no GOTO


kartik 
Moderator	
Posted 1 year ago # 


void print(int n)
{
  if(n > 40000)
      return;
  printf("%d ", n);
  print(2*n);
  printf("%d ", n);
}     

int main()
{
  print(20);
  getchar();
}

duke87 
guest	
Posted 1 year ago # 


use recursion

void print(int n,int m)
{

	if(n<m)
	return ;
	if(n<400 && flag==1)
	{
		cout<<n<<endl;
		print(2*n,m);
	}
	if(n>=400)
	flag =0;
	if(n<400 && flag ==0)
	{
		cout<<n<<endl;
		print(n/2,m);

		flag=45;
	}

}

int main()
{

	int n =4;
	int m=n;
	print(n,m);

	return 0;
}

Hackme 
Member	
Posted 1 week ago # 


#include <stdio.h>
#include <stdlib.h>

void p(int num)
{
if(num < 40000){
printf( "-> %d\n",num);
num = num<<1;
p(num);
return;
}
return;
}

int main()
{
int num;
printf("Enter number:");
scanf("%d",&num);
printf("\n");
p(num);
getchar();
return 0;
}























iven two arrays of numbers, find if each of the two arrays have the same
set of ntegers ? Suggest an algo which can run faster than NlogN without
extra space?


Solution 
guest	
Posted 3 months ago # 


// arrays are A[] and B[]

for (int i = 0; i < n; i++) {
      A[i] = (A[i]*A[i]*A[i]) - (B[i]*B[i]*B[i]);
}
int total = 0;
for (int i = 0l i < n; i++) {
      total += A[i];
}
if (total == 0)     return true; // both are same i.e.
else                   return false; // not same
I am not very sure whether this might give a false positive. Mathematical guys please confirm. Otherwise I think my algo is pretty neat. Runs in O(n). You can argue that the arrays are destroyed, but they can always be restored provided I have the other array. Looking forward to replies.

Sayak


rajcools 
Member	
Posted 3 months ago # 


behind every algo there is a reason or a resource , what's behind this.. u r just adding up the difference of cubes of elements of two arrays....


panghuhu 
Member	
Posted 3 months ago # 


to Sayak:

It will give false positive. One example is 1^3 + 12^3 = 9^3 + 10^3 = 1729


jpchaandy 
Member	
Posted 3 months ago # 


create two hasmaps of the two arrays.And check whether each element in one array is present hashmap of other array.It takes O(N) time to create hash map and O(N ) to search.So total complexity is O(N)


rajcools 
Member	
Posted 3 months ago # 


@jpchaandy extra space my friend... hashing can be used we all know but that requires extra space


rai.skumar 
Member	
Posted 3 months ago # 


Add integers of both arrays and then check their differences. If difference is zero then both have same set of integers.

sum1 = sumTheArrayElements(a);
sum2 = sumTheArrayElements(b);

if(sum1-sum2==0)
identical.

This definitely takes two extra spaces though, but sum can be stored in the first place of both arrays as well.


Botem 
Member	
Posted 3 months ago # 


bool TwoArrayAreSame(int * a, int * b, size_t size)
{
	for (int i = 1; i < size; ++i)
	{
		a[0] ^= a[i];
		b[0] ^= b[i];
	}
	//
	return ((a[0] ^ b[0]) == 0);
}

Rajneesh 
Member	
Posted 3 months ago # 


If we are not concerned about the the number of repetition of elements in the array, then Botem is perfect i guess!


Rajneesh 
Member	
Posted 3 months ago # 


ooooopsssss!!! Sorry botem. Above algo not at all works! Pardon me for above comment.


KB 
guest	
Posted 3 months ago # 


return ((a[0] ^ b[0]) == 0);

The reson the algo is going to work is because the operation "exclusive or" ^ is both commutative and associative.

should actually be return (a[0] == b[0]);


KB 
guest	
Posted 3 months ago # 


Well!!! my modification will not work either:

Supoose One Array has the following numbers {0, 0, 0}
and the other has {1, 2, 3}

The xor of both the arrays will be 0.

By the way adding will not work too as suggested by rai.skumar. The counter example for that algo is:

Array 1: {2, 4, 0}

Array 2: {2, 3, 1}

Both has a sum of 6 but they do not have similar elements.


jpchaandy 
Member	
Posted 3 months ago # 


sort the two arrays we can do it o(NLogn).Then test for the equality of elements


Agniswar 
Member	
Posted 3 months ago # 


I think Bit wise AND-ing would help..isn't it ?


sanju 
Member	
Posted 3 months ago # 


If extra space is allowed, then create a hash table for one array and find the elements of the other array in the hash table. If all the elements are found, then we are done, otherwise both arrays don't contain same subset of integers.


Agniswar 
Member	
Posted 3 months ago # 


@sanju : We cannot use extra space as its mentioned in the question ..


Vernon Beae 
guest	
Posted 3 months ago # 


Allowed markup: BBcode a blockquote code em strong ul ol li font strike center u hr.
You can also put code in between backtick ( ` ) characters.




































There are set of coins of {50,25,10,5,1} paise in a box. Write a program to find the number of ways a 1 rupee can be created by grouping the paise.


insanity27 
guest	
Posted 1 month ago # 


#include<stdio.h>

int onerupee()
{

int sum1 = 0, sum2 = 0, sum3 = 0, sum4 = 0;

int count = 0;

for(sum1 = 0 ; sum1 < 100; sum1 += 50) //for 50 paise
{
for(sum2 = sum1; sum2 < 100; sum2 += 25) //for 25 paise
{
for(sum3 = 0; sum3 <=20; sum3 += 10) //for 10 paise
{
for(sum4 = sum3; sum4 <= 100; sum4 += 5) //for 5 paise
{
count++; //for 1 paise
}
if(sum3==100)
count++;
}
}
}

return count;
}

int main()
{
printf("Count = %d\n", onerupee());
return 0;
}
plz correct me if Im wrong...


insanity27 
guest	
Posted 1 month ago # 


/*Ignore previous post*/
#include<stdio.h>

int onerupee()
{

int sum1 = 0, sum2 = 0, sum3 = 0, sum4 = 0,sum5=0;

int count = 0;

for(sum1 = 0 ; sum1 < 100; sum1 += 50) //for 50 paise
{
for(sum2 = sum1; sum2 < 100; sum2 += 25) //for 25 paise
{
for(sum3 = 0; sum3 <=20; sum3 += 10) //for 10 paise
{
for(sum4 = sum3; sum4 <= 100; sum4 += 5) //for 5 paise
{
for(sum5=sum4;sum5<=100;sum5+=1)//for 1 paise
{
if(sum5==100)
count++;
}
}
}
}
}
return count;
}

int main()
{
printf("Count = %d\n", onerupee());
return 0;
}


Ravi Kiran 
guest	
Posted 1 month ago # 


the same using recursion :

#include <stdio.h>

int elements[]={50,25,10,5,1};
int sum=100;

void CombineCoins (int a[], int sumRequired, int startingIndex, int sizeOfA,
                                                         int *countOfCombination)
{
	int tempsum = 0;
	int i=0;

	// sumRequired = 100 - sumOfCoinsAlreadySelected
	if ( sumRequired == 0 )
	{
		(*countOfCombination)++;
		return;
	}

	for ( i=startingIndex; i<sizeOfA; i++)
	{
		tempsum = sumRequired - a[i];

		if ( tempsum >= 0 )
			CombineCoins(a, tempsum, i, sizeOfA, countOfCombination);

		tempsum += a[i];
			// unroll back the element
	}

	return;
}

int main(int argc, char* argv[])
{
	int countOfCombinations=0;

	CombineCoins(elements, sum, 0, 5, &countOfCombinations);

	printf("Count of Combinations - %d", countOfCombinations);

	return 0;
}
doesn't have any error handling. solution got : 292


Saurabh Sah 
guest	
Posted 1 month ago # 


@insanity27 still incorrect

#include<stdio.h>

int onerupee()
{

int sum1 = 0, sum2 = 0, sum3 = 0, sum4 = 0,sum5=0;

int count = 0;

for(sum1 = 0 ; sum1 <= 100; sum1 += 50) //for 50 paise
{
for(sum2 = sum1; sum2 <= 100; sum2 += 25) //for 25 paise
{
for(sum3 = sum2; sum3 <=100; sum3 += 10) //for 10 paise
{
for(sum4 = sum3; sum4 <= 100; sum4 += 5) //for 5 paise
{
for(sum5=sum4;sum5<=100;sum5+=1)//for 1 paise
{
if(sum5==100)
count++;
}
}
}
}
}
return count;
}

int main()
{
printf("Count = %d\n", onerupee());
return 0;
}


Venki 
Moderator	
Posted 1 month ago # 


http://en.wikipedia.org/wiki/Subset_sum_problem


prerna 
guest	
Posted 1 month ago # 


The above problem can be seen as a combinatorics problem in which x1(50),x2(25p coin)..and so on.
The number of integral solutions to the equation

x1+x2+x3+x4+x5=100 where each of x1,x2,x3,x4,x5>=0.

This way the solution can be obtained easily.


prerna 
guest	
Posted 1 month ago # 


the above method will give the total no. of combinations possible but not the individual combinations..


Varun 
guest	
Posted 1 week ago # 


Recursive Implementation:

#include <iostream>
using namespace std;

int count =0;
int A[]={50,25,10,5,1};
int f(int amount, int index){
	if (index == 4) {
		count++;
		return 0;
	}
	if(amount==0) {
		count++;
		return 0;
	}
	for(int i=0; i<=amount/A[index]; i++) {
		f(amount-i*A[index], index+1);
	}
	return 0;
}

int main() {
	count =0;
	f(100,0);
	cout<<count<<endl;
	return 0;
}
Iterative Implementation:

#include <stdio.h>

int onerupee()
{
    int sum1 = 0, sum2 = 0, sum3 = 0, sum4 = 0;
    int count = 0;

    for(sum1 = 0 ; sum1 <= 100; sum1 += 50) //for 50 paise
    {
        for(sum2 = sum1; sum2 <= 100; sum2 += 25) //for 25 paise
        {
            for(sum3 = sum2; sum3 <= 100; sum3 += 10) //for 10 paise
            {
                for(sum4 = sum3; sum4 <= 100; sum4 += 5) //for 5 paise
                {
                    count++; //remaining 1 paise
                }
            }
        }
    }
    return count;
}

int main()
{
    printf("Count = %d\n", onerupee());
}









































Generate n random numbers in the range 0...n-1 without repetition (using something like drand48 which returns a fraction in the range [0...1).


rajcools 
Member	
Posted 3 months ago # 


as google has asked it there must be specific constraints

else i can maintain a static bit vector in my random number generator function that will not check if we r doing any repetitions and to get number in 0-n-1 we can generate in many ways.... Missing something?


Ankit 
guest	
Posted 3 months ago # 


@raj can post the solution ??


rajcools 
Member	
Posted 3 months ago # 


@ankit yes i will soon


rajcools 
Member	
Posted 3 months ago # 


#include<stdio.h>
#include<stdlib.h>
void setbit(int *bitvector ,int bit)
{
     *bitvector = *bitvector |(1<<bit);
}
int getbit(int bitvector, int bit)
{
    return (bitvector&(1<<bit))>>bit;
}
//using very simple random number generator
unsigned int myrand(unsigned int num)
{
    // i am using a 32 bitvector but we can do for any length by using array of
    // integers and using their bits
    //with every integer we will get additional 32 bits
    static bitvector =0;
    unsigned int newrand=1;
    //http://en.wikipedia.org/wiki/Linear_congruential_generator
   //read abut linear generator these are of the form xn_1=a*xn+c (mod m)
   //a and c are dependent upon m
   // i can write code for calculating c and a based on m but that will take time
   //as of now u can just change the value by manually calculating
   int seed;
   int i;
   for( i = 0;i<num;i++)
   {
   seed = newrand;
   while(1)
   {
   newrand = (21*seed+3)%num;
   if(getbit(bitvector,newrand))
    seed = newrand;
    else
    break;

 }
    setbit(&bitvector,newrand);
    printf("%d ",newrand);
}
 //   return newrand;
    return 0;
}
int main()
{
    unsigned int num;
    printf("Enter the number upto which u want random number\n");
    scanf("%u",&num);
    getchar();
    myrand(num);
    getchar();
}

aks 
guest	
Posted 3 months ago # 


if we have enough space then we could do
1.store the n numbers in arr[n]
2.initially start=0
3.generate index=random(start,n-1)
4.print arr[index]
5.swap arr[index] and arr[start]
start++;
6.repeat 3,4,5 while start<n


Rohit Saraf 
Member	
Posted 1 week ago # 


I think it can be done without any extra space.

Initialize the array a with {0..n-1}.

For i = n-1 downto 1
- Generate a random number(0..i-1}, say k
- swap(a[i], a[k])

This will produce any permutuation with equal probability

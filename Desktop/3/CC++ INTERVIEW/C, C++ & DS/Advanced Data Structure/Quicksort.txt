One of the most popular sorting algorithms is quicksort. Quicksort executes in O(n lg n) on average, and O(n2) in the worst-case. However, with proper precautions, worst-case behavior is very unlikely. Quicksort is a non-stable sort. It is not an in-place sort as stack space is required.
Theory
The quicksort algorithm works by partitioning the array to be sorted, then recursively sorting each partition. In Partition one of the array elements is selected as a pivot value. Values smaller than the pivot value are placed to the left of the pivot, while larger values are placed to the right.

int function Partition (Array A, int Lb, int Ub);
begin
select a pivot from A[Lb]ÉA[Ub];
reorder A[Lb]ÉA[Ub] such that:
all values to the left of the pivot are £ pivot
all values to the right of the pivot are ³ pivot
return pivot position;
end;

procedure QuickSort (Array A, int Lb, int Ub);
begin
if Lb > Ub then
M = Partition (A, Lb, Ub);
QuickSort (A, Lb, M-1);
QuickSort (A, M+1, Ub);
end;

The pivot selected is 3. Indices are run starting at both ends of the array. Index i starts on the left and selects an element that is larger than the pivot, while index j starts on the right and selects an element that is smaller than the pivot. These elements are then exchanged. QuickSort recursively sorts the two subarrays, resulting in 	the sorted array.
As the process proceeds, it may be necessary to move the pivot so that correct ordering is maintained. In this manner, QuickSort succeeds in sorting the array. If we're lucky the pivot selected will be the median of all values, thus equally dividing the array. For a moment, let's assume that this is the case. Since the array is split in half at each step, and Partition must eventually examine all n elements, the run time is O(n lg n). To find a pivot value, Partition could simply select the first element (A[Lb]). All other values would be compared to the pivot value, and placed either to the left or right of the pivot as appropriate.  However, there is one case that fails miserably. Suppose the array was originally in order.  Partition would always select the lowest value as a pivot and split the array with one element in the left partition, and Ub > Lb elements in the other. Each recursive call 	to quicksort would only diminish the size of the array to be sorted by one. Thus, n recursive calls would be required to do the sort, resulting in a O(n2) run time.  One solution to this problem is to randomly select an item as a pivot. This would make it extremely unlikely that worst-case behavior would occur.
#include<stdio.h>
#include<math.h>
#include<stdlib.h>
#define COUNT 50 // No. of input data values taken  as anput to the predictor 
#define MAX 350   // Maximum Value of the array used in the program
#define p 24      // Order of the predictor
double d[MAX];
/* 
-------------------------------------------------------------------------------------
   This is Lattice algorithm used for Linear prediction. Here, 'p' is 
the order of    the predictor and x1[] is the input data with 'COUNT' data samples 
given to the algorithm.
   
-------------------------------------------------------------------------------------*/
   
void latt(double x1[COUNT])
{
	int i,j,k,l,N;
	
	double gamma = 1.0,sum,sum1=0.0,xcap;

 	double denf[p],deng[p],num[p],kf[p],kg[p],x[MAX];
 	double b[p][p],f[p][MAX],g[p][MAX];
 	
 // In the above declaration, kf[] and kg[] are the reflection coefficients
 // in both the directions with the order mentioned in the square paranthesis.
 	
 	FILE *f2;
 	f2=fopen("prediction.dat","w");
 	N=COUNT;
 	
 	// storing the input data in another array x[]
 	
 	for(i=0;i<N;i++)
	{
	 	x[i]=x1[i]; 
	}
	// storing the data is over
	 		
	
	 	//printf("N=%d\n",N);
 		for(k=0;k<N;k++) // Initialization loop 
 		{
			f[0][k]=x[k]; // forward prediction error of order '0' , f0(n) = 
x(n) 
		  	g[0][k]=x[k]; // backward prediction error of order '0' ,g0(n) = 
x(n)
		  	sum1+=x[k]*x[k];
 		}
 		
 		//printf("signal power=%lf\n",sum1);
 		
		/* Lattice filter */
	    
    		for(j=1;j<=p;j++)
    		{
     			num[j]=0.0;      // numerator term
     			denf[j]=0.00001; // denominator term
     			deng[j]=0.00001;
     
  //....... Computation of the forward reflection coefficient kf[] .............. 
     
  			for(k=0;k<N;k++)
  			{
  				num[j]=gamma*num[j]+f[j-1][k]*g[j-1][k-1];
		  		deng[j]=gamma*deng[j]+g[j-1][k-1]*g[j-1][k-1];
  				denf[j]=gamma*denf[j]+f[j-1][k]*f[j-1][k];
  			}
 //printf("num[%d]=%lf  denf[%d]=%lf  deng[%d]=%lf \n",j,num[j],j,denf[j],j,deng[j]);
  			
  			kf[j]=2.0*num[j]/(denf[j]+deng[j]); 
  			
 //......................Computation of the kf[] is over .......................
  			
			/*  kg[j]=num[j]/deng[j]; */

			if(kf[j]>=1.0) kf[j]=0.99;
  			if(kf[j]<=-1.0) kf[j]=-0.99;
  
			/*  if(kg[j]>=1.0) kg[j]=1.0;
  			if(kg[j]<=-1.0) kg[j]=-1.0; */
  
			//printf("kf[%d]=%lf \n",j,kf[j]); 
			
//................Computation of forward and backward prediction errors f[][] & g[][] ......
			
			sum=0.0;
  			for(k=j;k<N;k++) // 
  			{
  				f[j][k]=f[j-1][k] - kf[j]*g[j-1][k-1];
  				//sum+=f[j][k]*f[j][k];
  				g[j][k]=g[j-1][k-1] - kf[j]*f[j-1][k];
  				//printf("f[%d][%d] = %lf\n",j,k,f[j][k]); 
  			}
 //................Computation of forward and backward prediction errors f[][] & g[][] ......
  			
  			//getchar();
  			//printf("sum=%lf\n",sum/j);
  		
  			// Conversion of Lattice coefficients (or reflection coefficients) 
  			// to direct form filter coefficients( or AR parameters).
  		
			b[j][j]= kf[j]; // AR parameters
  			b[0][0]=1.0;
  			b[0][1]=0.0;
  
  			for(l=1;l<j;l++)
  			{
   				b[j][l]=b[j-1][l]-kf[j]*b[j-1][j-l];	
    			}
    		
    			// conversion of coefficients is over 
    		}
    		
    		xcap=0;
  		for(i=1;i<=p;i++)
  		{
  			if(j<i) xcap=xcap;
  			else xcap+=b[p][i]*x[N-i];
  		}
  		printf("xcap %d=%lf\n",N,xcap);
  		
  		fprintf(f2,"%lf\n",xcap);
  		x[N]=xcap;
  		N++;
  		
  	}  // end of while loop
  	
  	fclose(f2);
  	
}

main()
{
	int i,j;
	double u[COUNT];   // 10*N is arbitarily choosen

	FILE *fest;	 
	fest = fopen("est_coef.dat","r");
	
	 i=0;
	 do
  	 {
   		fscanf(f1,"%lf\n",&d[i]);
   		i++;
  	 }while(!feof(fest));
  		 
 	for(j=0;j<COUNT;j++)
 	{
 	 	u[j] = d[j];
 	} 	
	fclose(fest);
	
	// Call the function program
	latt(u);
	//for(i=0;i<COUNT;i++)
	//printf("u[%d]=%lf\n",i,u[i]);
	
} // end of the main program
